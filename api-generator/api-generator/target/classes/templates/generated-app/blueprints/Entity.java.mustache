package {{packageBase}}.domain;

import jakarta.persistence.*;
import java.util.*;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;

@Entity
@Table(name = "{{table}}")
{{#isParent}}
@Inheritance(strategy = InheritanceType.JOINED)
{{/isParent}}
public class {{name}}{{#parentName}} extends {{parentName}}{{/parentName}} {

  // ===== Campos simples =====
  {{^isChild}}
  {{#fields}}
  {{#isId}}
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  {{/isId}}
  @Column(name = "{{name}}"{{^nullable}}, nullable = false{{/nullable}}{{#unique}}, unique = true{{/unique}})
  private {{type}} {{name}};
  {{/fields}}
  {{/isChild}}

  // ===== Relaciones =====
  {{#manyToOne}}
  @ManyToOne
  @JoinColumn(name = "{{joinColumn}}")
  @JsonBackReference
  private {{target}} {{targetVar}};
  {{/manyToOne}}

  {{#oneToMany}}
  @OneToMany(mappedBy = "{{mappedBy}}")
  @JsonManagedReference
  private List<{{target}}> {{targetVar}}s = new ArrayList<>();
  {{/oneToMany}}

  {{#oneToOneOwning}}
  @OneToOne
  @JoinColumn(name = "{{joinColumn}}")
  @JsonIgnore
  private {{target}} {{targetVar}};
  {{/oneToOneOwning}}

  {{#oneToOneInverse}}
  @OneToOne(mappedBy = "{{mappedBy}}")
  @JsonIgnore
  private {{target}} {{targetVar}};
  {{/oneToOneInverse}}

  {{#manyToManyOwning}}
  @ManyToMany
  @JoinTable(
      name = "{{joinTable}}",
      joinColumns = @JoinColumn(name = "{{thisJoin}}"),
      inverseJoinColumns = @JoinColumn(name = "{{otherJoin}}")
  )
  @JsonIgnore
  private List<{{target}}> {{targetVar}}s = new ArrayList<>();
  {{/manyToManyOwning}}

  {{#manyToManyInverse}}
  @ManyToMany(mappedBy = "{{mappedBy}}")
  @JsonIgnore
  private List<{{target}}> {{targetVar}}s = new ArrayList<>();
  {{/manyToManyInverse}}

  // ===== Getters & Setters =====
  {{^isChild}}
  {{#fields}}
  public {{type}} get{{Name}}() { return {{name}}; }
  public void set{{Name}}({{type}} {{name}}) { this.{{name}} = {{name}}; }
  {{/fields}}
  {{/isChild}}

  {{#manyToOne}}
  public {{target}} get{{targetVarCap}}() { return {{targetVar}}; }
  public void set{{targetVarCap}}({{target}} {{targetVar}}) { this.{{targetVar}} = {{targetVar}}; }
  {{/manyToOne}}

  {{#oneToMany}}
  public List<{{target}}> get{{targetVarCap}}s() { return {{targetVar}}s; }
  public void set{{targetVarCap}}s(List<{{target}}> {{targetVar}}s) { this.{{targetVar}}s = {{targetVar}}s; }
  {{/oneToMany}}

  {{#oneToOneOwning}}
  public {{target}} get{{targetVarCap}}() { return {{targetVar}}; }
  public void set{{targetVarCap}}({{target}} {{targetVar}}) { this.{{targetVar}} = {{targetVar}}; }
  {{/oneToOneOwning}}

  {{#oneToOneInverse}}
  public {{target}} get{{targetVarCap}}() { return {{targetVar}}; }
  public void set{{targetVarCap}}({{target}} {{targetVar}}) { this.{{targetVar}} = {{targetVar}}; }
  {{/oneToOneInverse}}

  {{#manyToManyOwning}}
  public List<{{target}}> get{{targetVarCap}}s() { return {{targetVar}}s; }
  public void set{{targetVarCap}}s(List<{{target}}> {{targetVar}}s) { this.{{targetVar}}s = {{targetVar}}s; }
  {{/manyToManyOwning}}

  {{#manyToManyInverse}}
  public List<{{target}}> get{{targetVarCap}}s() { return {{targetVar}}s; }
  public void set{{targetVarCap}}s(List<{{target}}> {{targetVar}}s) { this.{{targetVar}}s = {{targetVar}}s; }
  {{/manyToManyInverse}}

}
